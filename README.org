#+TITLE: Doom Emacs Config
#+PROPERTY: header-args :tangle config.el

* Table of Contents :toc:
- [[#doom-emacs-config][DOOM EMACS CONFIG]]
- [[#ui][UI]]
  - [[#setting-the-font][Setting the font]]
  - [[#setting-the-theme][Setting the Theme]]
  - [[#winner-mode][Winner mode]]
  - [[#perspective][PERSPECTIVE]]
- [[#editor-settings][EDITOR SETTINGS]]
  - [[#commenting-lines][Commenting lines]]
  - [[#cursor][Cursor]]
  - [[#splits][Splits]]
  - [[#auto-save-changed-files][Auto save changed files]]
  - [[#colored-strings][Colored strings]]
  - [[#emojis][Emojis]]
- [[#org-mode][ORG MODE]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-agenda][Org Agenda]]
- [[#dashboard][DASHBOARD]]
  - [[#configuring-dashboard][Configuring Dashboard]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#modeline][MODELINE]]
  - [[#configuring-modeline][Configuring Modeline]]
- [[#evaluate-elisp-code][EVALUATE ELISP CODE]]
- [[#calendar][CALENDAR]]

* DOOM EMACS CONFIG
This is my Doom Emacs config which is filled mostly by code snippets I found online. This is an every evolving config as I find new cool things to put in here every day.

* UI
** Setting the font
Setting the font so emacs is easily readable.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 20 :weight 'light)
      doom-variable-pitch-font (font-spec :family "Fira Code Retina" :size 13 :weight 'light))
#+end_src

** Setting the Theme
Setting the theme to make emacs cool.
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

** Winner mode
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner redo" "<right>" #'winner-redo
       :desc "Winner undo" "<left>" #'winner-undo))
#+END_SRC

** PERSPECTIVE
Perspective provides multiple named workspaces (or "perspectives") in Emacs, similar to having multiple desktops in window managers like Awesome and XMonad.  Each perspective has its own buffer list and its own window layout, making it easy to work on many separate projects without getting lost in all the buffers.  Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default).  Doom Emacs uses 'SPC some_key' for binding some of the perspective commands, so I used this binging format for the perspective bindings that I created..

| COMMAND                    | DESCRIPTION                         | KEYBINDING |
|----------------------------+-------------------------------------+------------|
| persp-switch               | Switch to perspective NAME          | SPC DEL    |
| persp-switch-to-buffer     | Switch to buffer in perspective     | SPC ,      |
| persp-next                 | Switch to next perspective          | SPC ]      |
| persp-prev                 | Switch to previous perspective      | SPC [      |
| persp-add-buffer           | Add a buffer to current perspective | SPC +      |
| persp-remove-by-name       | Remove perspective by name          | SPC -      |
| +workspace/switch-to-{0-9} | Switch to workspace /n/             | SPC 0-9    |

#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to perspective NAME" "DEL" #'persp-switch
      :desc "Switch to buffer in perspective" "," #'persp-switch-to-buffer
      :desc "Switch to next perspective" "]" #'persp-next
      :desc "Switch to previous perspective" "[" #'persp-prev
      :desc "Add a buffer current perspective" "+" #'persp-add-buffer
      :desc "Remove perspective by name" "-" #'persp-remove-by-name)
#+end_src

* EDITOR SETTINGS
** Commenting lines
Comment and uncommenting lines is one of the most used features so I set it to a easily accesible binding.
#+begin_src emacs-lisp
(map!
 :leader
 :desc "Comment line"
 "TAB TAB" #'comment-line)
#+end_src

** Cursor
Cursor is the most important feature when coding. So i made to be a box all the time. Also changed cursor color to the gruber cursor color.
#+begin_src emacs-lisp
(set-cursor-color "#ffdd33")
(evil-set-cursor-color "#ffdd33")
(setq +evil--default-cursor-color "#ffdd33")
(setq +evil--emacs-cursor-color "#ffdd33")
(custom-set-faces '(cursor ((t (:background "#ffdd33")))))
(setq evil-motion-state-cursor 'box)  ; █
(setq evil-visual-state-cursor 'box)  ; █
(setq evil-normal-state-cursor 'box)  ; █
(setq evil-insert-state-cursor 'box)  ; █
(setq evil-emacs-state-cursor  'hbar) ; _
#+end_src

** Splits
I set splits to default to opening on the right using 'prefer-horizontal-split'.  I set a keybinding for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits.  The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  But in all other respects, the indirect buffer and its base buffer are completely separate.  For example, I can fold one split but other will be unfolded.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+END_SRC

** Auto save changed files
#+begin_src emacs-lisp
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

** Colored strings
Rainbox mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it.
#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(global-rainbow-mode 1 )
#+end_src

** Emojis
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* ORG MODE
Settings for Org Mode
#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
;; Sound to play when the clock runs out
(setq org-clock-sound "~/.doom.d/ding.wav")
;; This sets the icon to display when the org headings are in a folded state.
(setq org-ellipsis " ▼ ")
;; Location to my Org files directory.
(setq org-directory "~/Desktop/Org/")
#+end_src

** Org Bullets
Enabling org bullets and setting custom font size for all of them.
#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "◆" "○" "●" "◆" "○" "●")))
#+end_src

** Org Agenda
*** Agenda Files
The Location to my Agenda Org files.
#+begin_src emacs-lisp
(setq org-agenda-files
      '("~/Desktop/Org/Agenda/Tasks.org"
        "~/Desktop/Org/Agenda/Urgent.org"
        "~/Desktop/Org/Agenda/Events.org"))
#+end_src

*** Agenda Log
This setting makes Agenda more detaied.
#+begin_src emacs-lisp
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
** Configuring Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "\nKEYBINDINGS:\
\nFind file               (SPC .)     \
Open buffer list    (SPC b i)\
\nFind recent files       (SPC f r)   \
Open the eshell     (SPC e s)\
\nOpen dired file manager (SPC d d)   \
List of keybindings (SPC h b b)")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.doom.d/doom-emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*. doesn't work at the moment.
#+begin_src emacs-lisp
(setq doom-fallback-buffer "*dashboard*")
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

** Configuring Modeline
Setting custom font, height and width of the bar in the right side of the modeline.
#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-14")
(setq doom-modeline-height 45     ;; sets modeline height
      doom-modeline-bar-width 5     ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t)   ;; adds folder icon next to persp name
#+end_src

* EVALUATE ELISP CODE
When working in emacs it is very important to be able to run a piece of emacs code whenever so I set a few easy keybindings for it.
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("e". "evaluate/EWW")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region" "r" #'eval-region))
#+end_src

* CALENDAR
Let's make a 12-month calendar available so we can have a calendar app that, when we click on time/date in xmobar, we get a nice 12-month calendar to view.

This is a modification of: http://homepage3.nifty.com/oatu/emacs/calendar.html
See also: https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months

#+begin_src emacs-lisp
;; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months
(defun xr/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
        (calendar-generate-month
          (setq month (+ month 1))
          year
          ;; indentation / spacing between months
          (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun xr/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
              (year (+ displayed-year arg)))
        (xr/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun xr/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (xr/scroll-year-calendar-forward (- (or arg 1)) event))

(map! :leader
      :desc "Scroll year calendar backward" "<left>" #'xr/scroll-year-calendar-backward
      :desc "Scroll year calendar forward" "<right>" #'xr/scroll-year-calendar-forward)

(defalias 'year-calendar 'xr/year-calendar)
#+end_src

#+RESULTS:
: year-calendar

Let's also play around with calfw.
#+begin_src emacs-lisp
(use-package! calfw)
(use-package! calfw-org)
#+end_src
